#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require_relative 'where.rex.rb'

module Fluent
  class FilterWhereParser < Racc::Parser

module_eval(<<'...end where.racc/module_eval...', 'where.racc', 100)

...end where.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    12,    13,     3,     9,    34,    35,    26,    27,     3,     9,
    36,    37,    38,     3,     9,     5,     7,     6,     4,    10,
    90,     5,     7,     6,     4,    10,     5,     7,     6,     4,
    10,     3,     9,    14,    15,    75,     3,     9,    76,     3,
    12,    13,     3,    77,     5,     7,     6,     4,    10,     5,
     7,     6,     4,    10,    58,    54,    56,    55,     3,     3,
     3,     3,    12,    13,    78,    79,    70,    80,    81,    82,
    83,    50,    52,    51,    64,    62,    60,    69,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    39,    40,
    41,    42,    43,    44,    28,    29,    30,    31,    32,    33,
    84,    85,    86,    87,    88,    89,    11,    12,    47,    91,
    66,    67,    68,    71,    72,    73,    74 ]

racc_action_check = [
    46,    46,     0,     0,     7,     7,     5,     5,    12,    12,
     7,     7,     7,     9,     9,     0,     0,     0,     0,     0,
    46,    12,    12,    12,    12,    12,     9,     9,     9,     9,
     9,    10,    10,     3,     3,    30,    13,    13,    31,    18,
    45,    45,    17,    32,    10,    10,    10,    10,    10,    13,
    13,    13,    13,    13,    18,    17,    17,    17,    16,    21,
    20,    19,     2,     2,    33,    34,    25,    35,    36,    37,
    38,    16,    16,    16,    21,    20,    19,    25,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     8,     8,
     8,     8,     8,     8,     6,     6,     6,     6,     6,     6,
    39,    40,    41,    42,    43,    44,     1,    49,    11,    70,
    22,    23,    24,    26,    27,    28,    29 ]

racc_action_pointer = [
    -2,   106,    60,    15,    72,     0,    88,    -2,    82,     9,
    27,   108,     4,    32,   nil,   nil,    54,    38,    35,    57,
    56,    55,    92,    93,    94,    61,    93,    94,    95,    96,
    15,    18,    23,    44,    45,    47,    48,    49,    50,    80,
    81,    82,    83,    84,    85,    38,    -2,   nil,   nil,   105,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    93,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -1,   -49,    -2,   -49,   -49,   -49,   -49,   -49,   -49,   -49,
   -49,   -49,   -49,   -49,    -3,    -4,   -49,   -49,   -49,   -49,
   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,
   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,   -49,
   -49,   -49,   -49,   -49,   -49,   -47,   -49,    92,   -45,   -46,
    -5,    -9,   -21,   -31,    -6,   -10,   -22,   -32,   -11,   -33,
   -12,   -34,   -13,   -35,   -14,   -36,   -23,   -24,   -25,   -43,
   -49,    -7,    -8,   -15,   -16,   -17,   -18,   -19,   -20,   -26,
   -27,   -28,   -29,   -30,   -37,   -38,   -39,   -40,   -41,   -42,
   -48,   -44 ]

racc_goto_table = [
     2,    53,    57,    59,    61,    63,    65,     1,   nil,    45,
    46,   nil,    48,    49 ]

racc_goto_check = [
     2,     3,     3,     3,     3,     3,     3,     1,   nil,     2,
     2,   nil,     2,     2 ]

racc_goto_pointer = [
   nil,     7,     0,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 24, :_reduce_none,
  1, 24, :_reduce_2,
  2, 26, :_reduce_3,
  2, 26, :_reduce_4,
  3, 25, :_reduce_5,
  3, 25, :_reduce_6,
  3, 25, :_reduce_7,
  3, 25, :_reduce_8,
  3, 25, :_reduce_9,
  3, 25, :_reduce_10,
  3, 25, :_reduce_11,
  3, 25, :_reduce_12,
  3, 25, :_reduce_13,
  3, 25, :_reduce_14,
  3, 25, :_reduce_15,
  3, 25, :_reduce_16,
  3, 25, :_reduce_17,
  3, 25, :_reduce_18,
  3, 25, :_reduce_19,
  3, 25, :_reduce_20,
  3, 25, :_reduce_21,
  3, 25, :_reduce_22,
  3, 25, :_reduce_23,
  3, 25, :_reduce_24,
  3, 25, :_reduce_25,
  3, 25, :_reduce_26,
  3, 25, :_reduce_27,
  3, 25, :_reduce_28,
  3, 25, :_reduce_29,
  3, 25, :_reduce_30,
  3, 25, :_reduce_31,
  3, 25, :_reduce_32,
  3, 25, :_reduce_33,
  3, 25, :_reduce_34,
  3, 25, :_reduce_35,
  3, 25, :_reduce_36,
  3, 25, :_reduce_37,
  3, 25, :_reduce_38,
  3, 25, :_reduce_39,
  3, 25, :_reduce_40,
  3, 25, :_reduce_41,
  3, 25, :_reduce_42,
  3, 25, :_reduce_43,
  4, 25, :_reduce_44,
  3, 25, :_reduce_45,
  3, 25, :_reduce_46,
  2, 25, :_reduce_47,
  3, 25, :_reduce_48 ]

racc_reduce_n = 49

racc_shift_n = 92

racc_token_table = {
  false => 0,
  :error => 1,
  :OR => 2,
  :AND => 3,
  :TIMESTAMP => 4,
  :NOT => 5,
  :EQ => 6,
  :NEQ => 7,
  :GT => 8,
  :GE => 9,
  :LT => 10,
  :LE => 11,
  :START_WITH => 12,
  :END_WITH => 13,
  :INCLUDE => 14,
  :IS => 15,
  :NULL => 16,
  :BOOLEAN => 17,
  :STRING => 18,
  :NUMBER => 19,
  :IDENTIFIER => 20,
  "(" => 21,
  ")" => 22 }

racc_nt_base = 23

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "OR",
  "AND",
  "TIMESTAMP",
  "NOT",
  "EQ",
  "NEQ",
  "GT",
  "GE",
  "LT",
  "LE",
  "START_WITH",
  "END_WITH",
  "INCLUDE",
  "IS",
  "NULL",
  "BOOLEAN",
  "STRING",
  "NUMBER",
  "IDENTIFIER",
  "\"(\"",
  "\")\"",
  "$start",
  "input",
  "exp",
  "timestamp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'where.racc', 39)
  def _reduce_2(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 42)
  def _reduce_3(val, _values)
     ParserVal.new(TimestampLiteral.new(val[1])) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 43)
  def _reduce_4(val, _values)
     ParserVal.new(TimestampLiteral(val[1])) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 45)
  def _reduce_5(val, _values)
     ParserVal.new(BooleanOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 46)
  def _reduce_6(val, _values)
     ParserVal.new(BooleanOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 47)
  def _reduce_7(val, _values)
     ParserVal.new(BooleanOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 48)
  def _reduce_8(val, _values)
     ParserVal.new(BooleanOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 49)
  def _reduce_9(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 50)
  def _reduce_10(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 51)
  def _reduce_11(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :GT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 52)
  def _reduce_12(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :GE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 53)
  def _reduce_13(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :LT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 54)
  def _reduce_14(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :LE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 55)
  def _reduce_15(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 56)
  def _reduce_16(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 57)
  def _reduce_17(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :GT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 58)
  def _reduce_18(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :GE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 59)
  def _reduce_19(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :LT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 60)
  def _reduce_20(val, _values)
     ParserVal.new(NumberOpExp.new(val[0], val[2], :LE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 61)
  def _reduce_21(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 62)
  def _reduce_22(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 63)
  def _reduce_23(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :START_WITH)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 64)
  def _reduce_24(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :END_WITH)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 65)
  def _reduce_25(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :INCLUDE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 66)
  def _reduce_26(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 67)
  def _reduce_27(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 68)
  def _reduce_28(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :START_WITH)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 69)
  def _reduce_29(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :END_WITH)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 70)
  def _reduce_30(val, _values)
     ParserVal.new(StringOpExp.new(val[0], val[2], :INCLUDE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 71)
  def _reduce_31(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 72)
  def _reduce_32(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 73)
  def _reduce_33(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :GT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 74)
  def _reduce_34(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :GE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 75)
  def _reduce_35(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :LT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 76)
  def _reduce_36(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :LE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 77)
  def _reduce_37(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 78)
  def _reduce_38(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :NEQ) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 79)
  def _reduce_39(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :GT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 80)
  def _reduce_40(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :GE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 81)
  def _reduce_41(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :LT)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 82)
  def _reduce_42(val, _values)
     ParserVal.new(TimestampOpExp.new(val[0], val[2], :LE)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 83)
  def _reduce_43(val, _values)
     ParserVal.new(NullOpExp.new(val[0], :EQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 84)
  def _reduce_44(val, _values)
     ParserVal.new(NullOpExp.new(val[0], :NEQ)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 85)
  def _reduce_45(val, _values)
     ParserVal.new(LogicalOpExp.new(val[0], val[2], :OR)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 86)
  def _reduce_46(val, _values)
     ParserVal.new(LogicalOpExp.new(val[0], val[2], :AND)) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 87)
  def _reduce_47(val, _values)
     ParserVal.new(NegateOpExp.new(val[1])) 
  end
.,.,

module_eval(<<'.,.,', 'where.racc', 88)
  def _reduce_48(val, _values)
     val[1] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class FilterWhereParser
  end   # module Fluent


